name: Build, create and stage production release

on:
  workflow_dispatch:
    inputs:
      nodeVersion:
        description: 'Node version'
        required: true
        default: '14.x'
  push:
    branches: [ master ]
    paths:
    - 'docs/release-notes.md'
    - 'site/**'
    - 'src/**'
    - 'gatsby-browser.js'
    - 'gatsby-config.js'
    - 'gatsby-node.js'
    - 'gatsby-ssr.js'
    - 'package.json'

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    # Setup environment for running AWS CLI
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      ENV: prod

    steps:

    # Ensure this action is master/main branches
    - name: Check branch is master/main
      if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main'
      run: exit 1

    # Install NodeJS
    - name: Use Node.js ${{ github.event.inputs.nodeVersion }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ github.event.inputs.nodeVersion }}

    - run: npm install -g gatsby-cli

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    #
    # Configure and run site content build
    #

    - name: Create AWS Amplify configuration file
      run: build/cognito/configure.sh -e ${ENV}

    - name: Build site content
      run: |
        npm install
        gatsby build

    - name: Upload site content
      uses: actions/upload-artifact@master
      with:
        name: site-content
        path: ${{ github.workspace }}/public

  release:
    needs: build
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    env:
      VERSION: '0.0'

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Retrieve built content from previous job
    - name: Download site content for release
      uses: actions/download-artifact@master
      with:
        name: site-content
        path: ${{ github.workspace }}/public

    # Create and tag release
    - name: Create release tag
      id: release_tag
      run: |
        git config user.email "$(git log -1 --pretty=format:'%an')"
        git config user.name "$(git log -1 --pretty=format:'%ae')"
        git fetch --tags origin

        set +e
        last_tag=$(git for-each-ref \
          --sort=-creatordate \
          --format '%(refname)' refs/tags \
          | grep "refs/tags/${VERSION}" \
          | head -1)
        set -e

        build_number=$(basename "$last_tag" | cut -d '.' -f3)
        [[ -n $build_number ]] || build_number=-1
        release_tag=${VERSION}.$((build_number+1))
        last_commit_msg=$(git log -1 --pretty=%B)

        echo "Creating release tag ${release_tag}..."
        git tag -a ${release_tag} -m "$last_commit_msg"
        git push --follow-tags

        echo "::set-output name=value::$(echo ${release_tag})"

    - name: Create release archive
      run: |
        zip -r ./site-content.zip public/

    - name: Create release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_tag.outputs.value }}
        release_name: AppBricks MyCloudSpace Release ${{ steps.release_tag.outputs.value }}
        body_path: ./docs/release-notes.md
        draft: false
        prerelease: true

    - name: Upload release archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./site-content.zip
        asset_name: site-content.zip
        asset_content_type: application/zip

  stage:
    needs: build
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    # Setup default environment for running AWS CLI and Terraform
    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      TF_VAR_env: stage
      TF_VAR_domain: appbricks.io
      TF_VAR_publish_path: ${{ github.workspace }}/public

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Retrieve built content from previous job
    - name: Download site content to be staged
      uses: actions/download-artifact@master
      with:
        name: site-content
        path: ${{ github.workspace }}/public

    # Initialize a new or existing Terraform working
    # directory by creating initial files, loading any
    # remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="key=website/appbricks-io_${TF_VAR_env}" \
          -backend-config="bucket=appbricks-tfstate-useast1" \
          build/publish

    # Generates an execution plan for Terraform
    - name: Site update plan (Terraform Plan)
      run: |
        terraform plan \
          build/publish

    # Apply Terraform plan and deploy site to a dev url
    - name: Publish Site (Terraform Apply)
      run: |
        terraform apply -auto-approve \
          build/publish
